rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // This rule allows anyone with your Firestore database reference to view, edit,
    // and delete all data in your Firestore database. It is useful for getting
    // started, but it is configured to expire after 30 days because it
    // leaves your app open to attackers. At that time, all client
    // requests to your Firestore database will be denied.
    //
    // Make sure to write security rules for your app before that time, or else
    // all client requests to your Firestore database will be denied until you Update
    // your rules
    // match /{document=**} {
    //  allow read, write: if true;
    // }
    // Regla para Chat Global
    // Para leer el usuario debe estar autenticado
    // Para crear un mensaje el usuario debe estar autenticado 
    match /chat/{message} {
    	allow read: if request.auth != null;
      
      allow create: if
      	request.auth != null &&
        //verifico que el id/email del usuario autenticado
        //coincide con los que se envian como contenido del documento
        request.auth.uid == request.resource.data.user_id;
    }
    
    // Regla para Usuarios
    // Para leer el usuario tiene que estar autenticado
    // Para crear el usuario tiene que estar autenticado y debe estar creando un documento para si mismo.
    // Para editar el usuario tiene que estar autenticado y debe estar actualizando
    // su propio perfil.
    
    match /users/{user} {
    	allow read: if request.auth != null;
      
      allow create, update: if 
      	request.auth != null &&
        //Verifico que el id del documento que se esta creando coincida
        // con el del usuario autenticado.
        // Paraobtener el id del usuario autenticado, hacemos lo que 
        // hicimos 
        
        request.auth.uid == user; 
      
    }
    
    
    // reglas chat privado
    //la verificacion del chat privado va a requerir
    //que pongamos reglas para los documentos de la 
    //coleccion raiz como de la subcoleccion messages.
    // para leer el usuario debe estar autenticado y 
    //ser parte de la conversacion.
    //para crear va ser igual autenticado + ser parte
    //de la conversacion
    match /private-chats/{chat} {
    	allow read: if
      	request.auth != null &&
        //verificamos si el usuario es parte de la
        //conversacion.
				(    
        	request == null ||
					(	
        	resource != null &&
        	request.auth.uid in resource.data.users
        	)
        );
        
      allow create: if
      	request.auth != null &&
        request.auth.uid in request.resource.data.users;
        
        
        //regla para los msjs del chat privado.
        //para crear el usuario debe estar autenticado , ser parte de la
        //conversacion y ser el que firma el mensaje.
        
        match /messages/{message} {
          allow read: if
          request.auth != null &&
          request.auth.uid in get(/databases/$(database)/documents/private-chats/$(chat)).data.users;  
        
        	allow create: if
          request.auth != null &&
          request.auth.uid in get(/databases/$(database)/documents/private-chats/$(chat)).data.users &&
          request.auth.uid == request.resource.data.sender_id;    
        
      } 
    }
        // Regla para Publicaciones
        match /publicaciones/{publication} {
          allow read: if request.auth != null;
          allow create, update: if 
            request.auth != null &&
            request.auth.uid == request.resource.data.user_id;
          allow delete: if
            request.auth != null &&
            request.auth.uid == request.resource.data.user_id;
    }
    
  }
}